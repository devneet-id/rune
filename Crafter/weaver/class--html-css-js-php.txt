<?php
/* {{COPYRIGHT}} */
new RUNE_{{HASH-APP}}();

class RUNE_{{HASH-APP}}
{
    private $CONSTRUCT='{{CONSTRUCT}}';

    public function __construct(){ $this->run(); }

    private function HTML_HEAD_{{HASH-APP}}(){
        return '{{HTML-HEAD}}';
    }

    private function HTML_{{HASH-APP}}(){
        return '{{HTML}}';
    }

    private function CSS_{{HASH-APP}}(){ 
        return '{{CSS}}';
    }

    public function JS_{{HASH-APP}}(){
        return '{{JS}}';
    }

    public function PHP_{{HASH-APP}}(){
        return '{{PHP}}';
    }

    public function run(){ $this->__installation_{{HASH-APP}}("PHP",$this->PHP_{{HASH-APP}}());$this->__installation_{{HASH-APP}}("CSS",$this->CSS_{{HASH-APP}}());$this->__installation_{{HASH-APP}}("JS",$this->JS_{{HASH-APP}}());$this->__installation_{{HASH-APP}}("HTML-HEAD",$this->HTML_HEAD_{{HASH-APP}}());$this->__installation_{{HASH-APP}}("HTML",$this->HTML_{{HASH-APP}}());eval("?>".$this->__encryption($this->CONSTRUCT,false)."<?php"); }

    private function __installation_{{HASH-APP}}($prefix,$bundle){ $SOURCE=$this->__encryption($bundle,false);$CONSTRUCT=$this->__encryption($this->CONSTRUCT,false);$CONSTRUCT=str_replace("{{".strtoupper($prefix)."}}",$SOURCE,$CONSTRUCT);$this->CONSTRUCT=$this->__encryption($CONSTRUCT,true); }

    private function __encryption($data,$state){ $TYPE='{{ENCRYPTION}}';if($state){if($TYPE=='base64'){return base64_encode($data);}if($TYPE=='gzip'){return gzencode($data);}}else{if($TYPE=='base64'){return base64_decode($data);}if($TYPE=='gzip'){return gzdecode($data);}} }
}
